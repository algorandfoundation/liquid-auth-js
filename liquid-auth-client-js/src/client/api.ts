/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Liquid Auth API
 * Authentication API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration.js";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AssertionCredentialJSON
 */
export interface AssertionCredentialJSON {
    /**
     * 
     * @type {string}
     * @memberof AssertionCredentialJSON
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AssertionCredentialJSON
     */
    rawId: string;
    /**
     * 
     * @type {AuthenticatorAssertionResponseJSON}
     * @memberof AssertionCredentialJSON
     */
    response: AuthenticatorAssertionResponseJSON;
    /**
     * 
     * @type {string}
     * @memberof AssertionCredentialJSON
     */
    type: string;
}
/**
 * 
 * @export
 * @interface AuthenticationExtensionsClientInputs
 */
export interface AuthenticationExtensionsClientInputs {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationExtensionsClientInputs
     */
    appid: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationExtensionsClientInputs
     */
    appidExclude: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticationExtensionsClientInputs
     */
    uvm: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticationExtensionsClientInputs
     */
    credProps: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticationExtensionsClientInputs
     */
    hmacCreateSecret: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticationExtensionsClientInputs
     */
    liquid: boolean;
}
/**
 * 
 * @export
 * @interface AuthenticatorAssertionResponseJSON
 */
export interface AuthenticatorAssertionResponseJSON {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorAssertionResponseJSON
     */
    authenticatorData: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorAssertionResponseJSON
     */
    clientDataJSON: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorAssertionResponseJSON
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorAssertionResponseJSON
     */
    userHandle: string;
}
/**
 * 
 * @export
 * @interface Credential
 */
export interface Credential {
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    device: string;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    publicKey: string;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    credId: string;
    /**
     * 
     * @type {number}
     * @memberof Credential
     */
    prevCounter: number;
}
/**
 * 
 * @export
 * @interface LinkResponseDTO
 */
export interface LinkResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof LinkResponseDTO
     */
    credId: string;
    /**
     * 
     * @type {any}
     * @memberof LinkResponseDTO
     */
    requestId: any;
    /**
     * 
     * @type {string}
     * @memberof LinkResponseDTO
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof LinkResponseDTO
     */
    challenge: string;
    /**
     * 
     * @type {string}
     * @memberof LinkResponseDTO
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface PublicKeyCredentialRequestOptions
 */
export interface PublicKeyCredentialRequestOptions {
    /**
     * 
     * @type {Array<string>}
     * @memberof PublicKeyCredentialRequestOptions
     */
    allowCredentials: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof PublicKeyCredentialRequestOptions
     */
    challenge: any;
    /**
     * 
     * @type {AuthenticationExtensionsClientInputs}
     * @memberof PublicKeyCredentialRequestOptions
     */
    extensions: AuthenticationExtensionsClientInputs;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyCredentialRequestOptions
     */
    rpId: string;
    /**
     * 
     * @type {number}
     * @memberof PublicKeyCredentialRequestOptions
     */
    timeout: number;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyCredentialRequestOptions
     */
    userVerification: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    wallet: string;
    /**
     * 
     * @type {Array<Credential>}
     * @memberof User
     */
    credentials: Array<Credential>;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        androidControllerAssetLinks(options: any = {}): FetchArgs {
            const localVarPath = `/.well-known/assetlinks.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # POST Assertion Request  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Request
         * @param {PublicKeyCredentialRequestOptions} body 
         * @param {any} credId Credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionRequest(body: PublicKeyCredentialRequestOptions, credId: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling assertionControllerAssertionRequest.');
            }
            // verify required parameter 'credId' is not null or undefined
            if (credId === null || credId === undefined) {
                throw new RequiredError('credId','Required parameter credId was null or undefined when calling assertionControllerAssertionRequest.');
            }
            const localVarPath = `/assertion/request/{credId}`
                .replace(`{${"credId"}}`, encodeURIComponent(String(credId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PublicKeyCredentialRequestOptions" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # POST Assertion Response  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Response
         * @param {AssertionCredentialJSON} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionResponse(body: AssertionCredentialJSON, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling assertionControllerAssertionResponse.');
            }
            const localVarPath = `/assertion/response`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssertionCredentialJSON" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerAttestationResponse(options: any = {}): FetchArgs {
            const localVarPath = `/attestation/response`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attestation Request Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerRequest(options: any = {}): FetchArgs {
            const localVarPath = `/attestation/request`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerKeys(options: any = {}): FetchArgs {
            const localVarPath = `/auth/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("connect.sid")
					: configuration.apiKey;
                localVarQueryParameter["connect.sid"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options: any = {}): FetchArgs {
            const localVarPath = `/auth/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRead(options: any = {}): FetchArgs {
            const localVarPath = `/auth/session`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Credential
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRemove(options: any = {}): FetchArgs {
            const localVarPath = `/auth/keys/{id}`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("connect.sid")
					: configuration.apiKey;
                localVarQueryParameter["connect.sid"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  # Yo yo Can I get a decend documentation out of here?     
         * @summary Submit a response from a ConnectQR Scan and login to service
         * @param {LinkResponseDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectControllerLinkWalletResponse(body: LinkResponseDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling connectControllerLinkWalletResponse.');
            }
            const localVarPath = `/connect/response`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LinkResponseDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        androidControllerAssetLinks(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).androidControllerAssetLinks(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * # POST Assertion Request  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Request
         * @param {PublicKeyCredentialRequestOptions} body 
         * @param {any} credId Credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionRequest(body: PublicKeyCredentialRequestOptions, credId: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PublicKeyCredentialRequestOptions> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).assertionControllerAssertionRequest(body, credId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * # POST Assertion Response  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Response
         * @param {AssertionCredentialJSON} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionResponse(body: AssertionCredentialJSON, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).assertionControllerAssertionResponse(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerAttestationResponse(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).attestationControllerAttestationResponse(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Attestation Request Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerRequest(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).attestationControllerRequest(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerKeys(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).authControllerKeys(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).authControllerLogout(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRead(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).authControllerRead(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete Credential
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRemove(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).authControllerRemove(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *  # Yo yo Can I get a decend documentation out of here?     
         * @summary Submit a response from a ConnectQR Scan and login to service
         * @param {LinkResponseDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectControllerLinkWalletResponse(body: LinkResponseDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).connectControllerLinkWalletResponse(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        androidControllerAssetLinks(options?: any) {
            return DefaultApiFp(configuration).androidControllerAssetLinks(options)(fetch, basePath);
        },
        /**
         * # POST Assertion Request  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Request
         * @param {PublicKeyCredentialRequestOptions} body 
         * @param {any} credId Credential ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionRequest(body: PublicKeyCredentialRequestOptions, credId: any, options?: any) {
            return DefaultApiFp(configuration).assertionControllerAssertionRequest(body, credId, options)(fetch, basePath);
        },
        /**
         * # POST Assertion Response  This endpoint is used to request assertion options from the FIDO2 service. 
         * @summary Assertion Response
         * @param {AssertionCredentialJSON} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assertionControllerAssertionResponse(body: AssertionCredentialJSON, options?: any) {
            return DefaultApiFp(configuration).assertionControllerAssertionResponse(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerAttestationResponse(options?: any) {
            return DefaultApiFp(configuration).attestationControllerAttestationResponse(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Attestation Request Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attestationControllerRequest(options?: any) {
            return DefaultApiFp(configuration).attestationControllerRequest(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerKeys(options?: any) {
            return DefaultApiFp(configuration).authControllerKeys(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any) {
            return DefaultApiFp(configuration).authControllerLogout(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRead(options?: any) {
            return DefaultApiFp(configuration).authControllerRead(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete Credential
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRemove(options?: any) {
            return DefaultApiFp(configuration).authControllerRemove(options)(fetch, basePath);
        },
        /**
         *  # Yo yo Can I get a decend documentation out of here?     
         * @summary Submit a response from a ConnectQR Scan and login to service
         * @param {LinkResponseDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectControllerLinkWalletResponse(body: LinkResponseDTO, options?: any) {
            return DefaultApiFp(configuration).connectControllerLinkWalletResponse(body, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public androidControllerAssetLinks(options?: any) {
        return DefaultApiFp(this.configuration).androidControllerAssetLinks(options)(this.fetch, this.basePath);
    }

    /**
     * # POST Assertion Request  This endpoint is used to request assertion options from the FIDO2 service. 
     * @summary Assertion Request
     * @param {PublicKeyCredentialRequestOptions} body 
     * @param {any} credId Credential ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assertionControllerAssertionRequest(body: PublicKeyCredentialRequestOptions, credId: any, options?: any) {
        return DefaultApiFp(this.configuration).assertionControllerAssertionRequest(body, credId, options)(this.fetch, this.basePath);
    }

    /**
     * # POST Assertion Response  This endpoint is used to request assertion options from the FIDO2 service. 
     * @summary Assertion Response
     * @param {AssertionCredentialJSON} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assertionControllerAssertionResponse(body: AssertionCredentialJSON, options?: any) {
        return DefaultApiFp(this.configuration).assertionControllerAssertionResponse(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attestationControllerAttestationResponse(options?: any) {
        return DefaultApiFp(this.configuration).attestationControllerAttestationResponse(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Attestation Request Options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attestationControllerRequest(options?: any) {
        return DefaultApiFp(this.configuration).attestationControllerRequest(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerKeys(options?: any) {
        return DefaultApiFp(this.configuration).authControllerKeys(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogout(options?: any) {
        return DefaultApiFp(this.configuration).authControllerLogout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerRead(options?: any) {
        return DefaultApiFp(this.configuration).authControllerRead(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete Credential
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerRemove(options?: any) {
        return DefaultApiFp(this.configuration).authControllerRemove(options)(this.fetch, this.basePath);
    }

    /**
     *  # Yo yo Can I get a decend documentation out of here?     
     * @summary Submit a response from a ConnectQR Scan and login to service
     * @param {LinkResponseDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public connectControllerLinkWalletResponse(body: LinkResponseDTO, options?: any) {
        return DefaultApiFp(this.configuration).connectControllerLinkWalletResponse(body, options)(this.fetch, this.basePath);
    }

}
